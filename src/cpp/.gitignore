
# The root .gitignore file contains all the rules for ignoring files that apply across the
# entire repository.  It is not a list of all files that anyone may want to ignore; it's
# only to cope with files created by tools that are widely used.
#
# Individual teams may, at their discretion, create .gitignore directories in folders that
# they control that include rules that make sense to their team.  For example, if a team uses
# Visual Studio, then it would make sense for them to create a .gitignore file that includes
# "bin" and "obj".  Since Visual Studio is not used across the board, and some teams might
# have reasons for creating folders named "bin" and "obj", there is no rule for it in this file.
#
# Github maintains a reasonable .gitignore list for Visual Studio projects, here:
# https://github.com/github/gitignore/blob/master/VisualStudio.gitignore

# TimeBuild log files
/build.resolve
build.timehistory
build.*.time

# Build temporary files
_objects.mac
*.ncb
*.edb
~
acl.txt
build.log
build.err
buildchk.dbb
buildchk.err
buildchk.evt
buildchk.exec.json
buildchk.stats.json
buildchk.ipc
buildchk.log
buildchk.metadata
buildchk.prf
buildchk.rec
buildchk.rec_dbg
buildchk.trc
buildchk.valpub
buildchk.wrn
buildfre.dbb
buildfre.err
buildfre.evt
buildfre.exec.json
buildfre.stats.json
buildfre.ipc
buildfre.log
buildfre.metadata
buildfre.prf
buildfre.rec
buildfre.rec_dbg
buildfre.trc
buildfre.valpub
buildfre.wrn
tmp*.xml

[Pp]ass*-buildfre.dbb
[Pp]ass*-buildfre.evt
[Pp]ass*-buildfre.log
[Pp]ass*-buildfre.metadata
[Pp]ass*-buildfre.prf
[Pp]ass*-buildfre.trc
[Pp]ass*-buildfre.exec.json
[Pp]ass*-buildfre.stats.json
[Pp]ass*-buildchk.dbb
[Pp]ass*-buildchk.evt
[Pp]ass*-buildchk.log
[Pp]ass*-buildchk.metadata
[Pp]ass*-buildchk.prf
[Pp]ass*-buildchk.trc
[Pp]ass*-buildchk.exec.json
[Pp]ass*-buildchk.stats.json

validate-pushrelease*.log

# SourcesCop log files produced by the SourcesCop analyzer report
SourcesCop*.err
SourcesCop*.err.json
SourcesCop.log

# MBS log file
mbsrt.log

# https://osgwiki.com/wiki/Mydirs_file
mydirs

# VSCode uses a .vscode directory to store extension data.
**/.vscode/*
!**/.vscode/tasks.json

# Visual Studio 2017 uses a .vs directory to store language service database and other files
.vs/
*.VC.db
*.VC.opendb

#  Visual Studio creates cache files for the solution view that are written to the source tree:
*CompileInputs.cache
*AssemblyReference.cache

# Some SD data files are created by bootstrapping processes until the tools that use
# them can be updated.
sd.ini
sd.map
/registered_data*.ini
/*.fastsync.log


# BCHost and the plugin lay down some files in the enlistment
/build-enlistment*.config
/OSRepoSetup.LabMetadata.txt


# Intl is pulled down via a bbpack, but linked into the git folder until the work is done
# to make the build able to reference intl/* from is vpack location.  Note that this is a
# symbolic link and to Git, a file, not a directory.
/intl

# The Developer folder will be phased out in the Git rollout. Developers should create
# their own systems for managing things that they want to use from enlistment to enlistment.
# The build lab is in the process of removing their developer folders, so all things
# except for their folders are ignored.
/developer/*
!/developer/acvexe/
!/developer/CodeTags.txt
!/developer/cxesa/
!/developer/razzle.ps1
!/developer/README.txt
!/developer/sbsbldgn/
!/developer/sebldsa/
!/developer/setrazzle.ps1
!/developer/srvbld/
!/developer/srvbsign/
!/developer/winabld/
!/developer/wincbld/
!/developer/winpbld/
!/developer/winxbld/
!/developer/wmbla/
!/developer/wsacbld/
# Developer files generated by TimeBuild. This list may expand as we expand to more build accounts.
/developer/win?bld/*.Base
/developer/win?bld/*._prerazzle
/developer/win?bld/StateSwitch.Save

# Tools folder rules
#
# Ignore references to binaries from older branches that no longer exist
/tools/amd64/dfmgr.exe
/tools/amd64/runelevated.exe
/tools/amd64/sd.exe
/tools/amd64/sdapi.dll
/tools/managed/v4.0/sdapi.dll
/tools/sdx.cmd
/tools/x86/runelevated.exe
/tools/x86/sd.exe
/tools/x86/sdapi.dll

# Remote.exe files are copies of the remote.CheckedInExe files.
# To update them, check in a new checkedinexe version.
/tools/amd64/remote.exe
/tools/x86/remote.exe

# Files generated by ngen
/tools/managed/*/assembly/
/tools/managed/**/enterprisesec.config.cch*
/tools/managed/**/security.config.cch
/tools/managed/**/ngen.log

# Files generated by sdvdiff as part of its self-update mechanism
/tools/**/sdvdiff.exe.$*

# Key generation (should be cleaned up)
/data/DistribData/esd/decryption/
/data/DistribData/esd/encryption/

# External source code built in the Windows source tree
#
# Some teams have code from external repos that they build in the Windows.  This code
# should not be added into the Windows source code for security and other reasons.
# To help prevent accidental inclusion of this code, the directories that are
# used for this code are ignored below (please keep this list alphabetized)
/base/oem/src/kernel/
/minkernel/oem/src/kernel/

# The following belong in the above group of code from external repos built with Windows 
# but the code is connected via a symbolic link which is a file to Git not a directory.
# Thus the trailing slash "/" was removed
/avcore/playready/private
/enigma
/symcrypt
/out